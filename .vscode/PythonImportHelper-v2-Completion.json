[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_PANEL",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "RED",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "BACKGROUND",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "render_text",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "render_connected_lines",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "render_mouse_position",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "render_points",
        "importPath": "helper",
        "description": "helper",
        "isExtraImport": true,
        "detail": "helper",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "board",
        "description": "board",
        "isExtraImport": true,
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "Board",
        "importPath": "board",
        "description": "board",
        "isExtraImport": true,
        "detail": "board",
        "documentation": {}
    },
    {
        "label": "Individual",
        "importPath": "individual",
        "description": "individual",
        "isExtraImport": true,
        "detail": "individual",
        "documentation": {}
    },
    {
        "label": "Individual",
        "importPath": "individual",
        "description": "individual",
        "isExtraImport": true,
        "detail": "individual",
        "documentation": {}
    },
    {
        "label": "Individual",
        "importPath": "individual",
        "description": "individual",
        "isExtraImport": true,
        "detail": "individual",
        "documentation": {}
    },
    {
        "label": "Individual",
        "importPath": "individual",
        "description": "individual",
        "isExtraImport": true,
        "detail": "individual",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "point",
        "description": "point",
        "isExtraImport": true,
        "detail": "point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "point",
        "description": "point",
        "isExtraImport": true,
        "detail": "point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "point",
        "description": "point",
        "isExtraImport": true,
        "detail": "point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "point",
        "description": "point",
        "isExtraImport": true,
        "detail": "point",
        "documentation": {}
    },
    {
        "label": "Point",
        "importPath": "point",
        "description": "point",
        "isExtraImport": true,
        "detail": "point",
        "documentation": {}
    },
    {
        "label": "Population",
        "importPath": "population",
        "description": "population",
        "isExtraImport": true,
        "detail": "population",
        "documentation": {}
    },
    {
        "label": "Population",
        "importPath": "population",
        "description": "population",
        "isExtraImport": true,
        "detail": "population",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "Button",
        "importPath": "button",
        "description": "button",
        "isExtraImport": true,
        "detail": "button",
        "documentation": {}
    },
    {
        "label": "GeneticAlgorithm",
        "importPath": "genetic_algorithm",
        "description": "genetic_algorithm",
        "isExtraImport": true,
        "detail": "genetic_algorithm",
        "documentation": {}
    },
    {
        "label": "Board",
        "kind": 6,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.board",
        "description": "Dropbox.workspace_dropbox.TSP_GA.board",
        "peekOfCode": "class Board:\n    def __init__(self, x: float, y: float, width: float, height: float, margin: float = 5):\n        self._x = x\n        self._y = y\n        self._width = width\n        self._height = height\n        self._margin = margin\n    def get_margin(self):\n        return self._margin\n    def get_position(self) -> tuple:",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.board",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.button",
        "description": "Dropbox.workspace_dropbox.TSP_GA.button",
        "peekOfCode": "class Button(Board):\n    def __init__(self, x: float, y: float, width: float, height: float, text: str = \"\", margin: float = 5):\n        super().__init__(x, y, width, height, margin)\n        self.__text = text\n    def render(self, screen, text, font):\n        super().render(screen)\n        text_button = font.render(text, True, BLACK)\n        screen.blit(text_button, (self._x + self._width // 2 - text_button.get_width() // 2, \n                                  self._y + self._height // 2 - text_button.get_height() // 2))",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.button",
        "documentation": {}
    },
    {
        "label": "GeneticAlgorithm",
        "kind": 6,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.genetic_algorithm",
        "description": "Dropbox.workspace_dropbox.TSP_GA.genetic_algorithm",
        "peekOfCode": "class GeneticAlgorithm:\n    def __init__(self, cities, population_size, mutation_rate, mutate_func_id):\n        self.__population = self.__create_population(cities, population_size)\n        self.__mutate_func_id = mutate_func_id\n        self.__population.set_mutate_rate(mutation_rate)\n        self.__mutation_rate = mutation_rate\n    def get_size(self):\n        return self.__population.get_size()\n    def get_individual_size(self):\n        return self.__population[0].get_size()",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.genetic_algorithm",
        "documentation": {}
    },
    {
        "label": "render_points",
        "kind": 2,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "def render_points(points, screen: pygame.Surface) -> None:\n    for point in points:\n        pygame.draw.circle(screen, RED, (point[0], point[1]), 4)\n        pygame.draw.circle(screen, WHITE, (point[0], point[1]), 2)\ndef render_text(screen, text, x, y, font):\n    text = font.render(text, True, BLACK)\n    screen.blit(text, (x, y))\ndef render_connected_lines(points: list, screen):\n    if (len(points) < 2):\n        return",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "render_text",
        "kind": 2,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "def render_text(screen, text, x, y, font):\n    text = font.render(text, True, BLACK)\n    screen.blit(text, (x, y))\ndef render_connected_lines(points: list, screen):\n    if (len(points) < 2):\n        return\n    for i in range(len(points) - 1):\n        pygame.draw.line(screen, BLACK, points[i], points[i + 1], 3)\n    if (len(points) > 2):\n        pygame.draw.line(screen, BLACK, points[len(points) - 1], points[0], 3)",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "render_connected_lines",
        "kind": 2,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "def render_connected_lines(points: list, screen):\n    if (len(points) < 2):\n        return\n    for i in range(len(points) - 1):\n        pygame.draw.line(screen, BLACK, points[i], points[i + 1], 3)\n    if (len(points) > 2):\n        pygame.draw.line(screen, BLACK, points[len(points) - 1], points[0], 3)\ndef render_mouse_position(board, screen, mouse_x, mouse_y, font):\n    if board.is_mouse_over(mouse_x, mouse_y):\n        text_mouse = font.render(\"(\" + str(mouse_x - board.get_position()[0] - board.get_margin()) + \",\" + ",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "render_mouse_position",
        "kind": 2,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "def render_mouse_position(board, screen, mouse_x, mouse_y, font):\n    if board.is_mouse_over(mouse_x, mouse_y):\n        text_mouse = font.render(\"(\" + str(mouse_x - board.get_position()[0] - board.get_margin()) + \",\" + \n                                            str(mouse_y - board.get_position()[1] - board.get_margin()) + \")\",True, BLACK)\n        screen.blit(text_mouse, (mouse_x + 10, mouse_y))",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "BACKGROUND_PANEL",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "BACKGROUND_PANEL = (252,246,232)\nBACKGROUND = (219,207,195)\nWHITE = (255,255,255)\nBLACK = (0,0,0)\nRED = (255,0,0)\nGREEN = (0,255,0)\nBLUE = (0,0,255)\nYELLOW = (147, 153, 35)\nPURPLE = (255,0,255)\nSKY = (0,255,255)",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "BACKGROUND",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "BACKGROUND = (219,207,195)\nWHITE = (255,255,255)\nBLACK = (0,0,0)\nRED = (255,0,0)\nGREEN = (0,255,0)\nBLUE = (0,0,255)\nYELLOW = (147, 153, 35)\nPURPLE = (255,0,255)\nSKY = (0,255,255)\nORANGE = (255,125,25)",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "WHITE = (255,255,255)\nBLACK = (0,0,0)\nRED = (255,0,0)\nGREEN = (0,255,0)\nBLUE = (0,0,255)\nYELLOW = (147, 153, 35)\nPURPLE = (255,0,255)\nSKY = (0,255,255)\nORANGE = (255,125,25)\nGRAPE = (100,25,125)",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "BLACK = (0,0,0)\nRED = (255,0,0)\nGREEN = (0,255,0)\nBLUE = (0,0,255)\nYELLOW = (147, 153, 35)\nPURPLE = (255,0,255)\nSKY = (0,255,255)\nORANGE = (255,125,25)\nGRAPE = (100,25,125)\nGRASS = (55,155,65)",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "RED = (255,0,0)\nGREEN = (0,255,0)\nBLUE = (0,0,255)\nYELLOW = (147, 153, 35)\nPURPLE = (255,0,255)\nSKY = (0,255,255)\nORANGE = (255,125,25)\nGRAPE = (100,25,125)\nGRASS = (55,155,65)\ndef render_points(points, screen: pygame.Surface) -> None:",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "GREEN = (0,255,0)\nBLUE = (0,0,255)\nYELLOW = (147, 153, 35)\nPURPLE = (255,0,255)\nSKY = (0,255,255)\nORANGE = (255,125,25)\nGRAPE = (100,25,125)\nGRASS = (55,155,65)\ndef render_points(points, screen: pygame.Surface) -> None:\n    for point in points:",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "BLUE = (0,0,255)\nYELLOW = (147, 153, 35)\nPURPLE = (255,0,255)\nSKY = (0,255,255)\nORANGE = (255,125,25)\nGRAPE = (100,25,125)\nGRASS = (55,155,65)\ndef render_points(points, screen: pygame.Surface) -> None:\n    for point in points:\n        pygame.draw.circle(screen, RED, (point[0], point[1]), 4)",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "YELLOW",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "YELLOW = (147, 153, 35)\nPURPLE = (255,0,255)\nSKY = (0,255,255)\nORANGE = (255,125,25)\nGRAPE = (100,25,125)\nGRASS = (55,155,65)\ndef render_points(points, screen: pygame.Surface) -> None:\n    for point in points:\n        pygame.draw.circle(screen, RED, (point[0], point[1]), 4)\n        pygame.draw.circle(screen, WHITE, (point[0], point[1]), 2)",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "PURPLE",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "PURPLE = (255,0,255)\nSKY = (0,255,255)\nORANGE = (255,125,25)\nGRAPE = (100,25,125)\nGRASS = (55,155,65)\ndef render_points(points, screen: pygame.Surface) -> None:\n    for point in points:\n        pygame.draw.circle(screen, RED, (point[0], point[1]), 4)\n        pygame.draw.circle(screen, WHITE, (point[0], point[1]), 2)\ndef render_text(screen, text, x, y, font):",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "SKY",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "SKY = (0,255,255)\nORANGE = (255,125,25)\nGRAPE = (100,25,125)\nGRASS = (55,155,65)\ndef render_points(points, screen: pygame.Surface) -> None:\n    for point in points:\n        pygame.draw.circle(screen, RED, (point[0], point[1]), 4)\n        pygame.draw.circle(screen, WHITE, (point[0], point[1]), 2)\ndef render_text(screen, text, x, y, font):\n    text = font.render(text, True, BLACK)",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "ORANGE",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "ORANGE = (255,125,25)\nGRAPE = (100,25,125)\nGRASS = (55,155,65)\ndef render_points(points, screen: pygame.Surface) -> None:\n    for point in points:\n        pygame.draw.circle(screen, RED, (point[0], point[1]), 4)\n        pygame.draw.circle(screen, WHITE, (point[0], point[1]), 2)\ndef render_text(screen, text, x, y, font):\n    text = font.render(text, True, BLACK)\n    screen.blit(text, (x, y))",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "GRAPE",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "GRAPE = (100,25,125)\nGRASS = (55,155,65)\ndef render_points(points, screen: pygame.Surface) -> None:\n    for point in points:\n        pygame.draw.circle(screen, RED, (point[0], point[1]), 4)\n        pygame.draw.circle(screen, WHITE, (point[0], point[1]), 2)\ndef render_text(screen, text, x, y, font):\n    text = font.render(text, True, BLACK)\n    screen.blit(text, (x, y))\ndef render_connected_lines(points: list, screen):",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "GRASS",
        "kind": 5,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "description": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "peekOfCode": "GRASS = (55,155,65)\ndef render_points(points, screen: pygame.Surface) -> None:\n    for point in points:\n        pygame.draw.circle(screen, RED, (point[0], point[1]), 4)\n        pygame.draw.circle(screen, WHITE, (point[0], point[1]), 2)\ndef render_text(screen, text, x, y, font):\n    text = font.render(text, True, BLACK)\n    screen.blit(text, (x, y))\ndef render_connected_lines(points: list, screen):\n    if (len(points) < 2):",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.helper",
        "documentation": {}
    },
    {
        "label": "Individual",
        "kind": 6,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.individual",
        "description": "Dropbox.workspace_dropbox.TSP_GA.individual",
        "peekOfCode": "class Individual:\n    def __init__(self, points: list[Point]):\n        self.__list = points\n        self.__sum_distance = self.__get_sum_distance()\n        self.__mutate_functions = {\n            0: self.__inversion_mutate,\n            1: self.__displacement_mutate,\n            2: self.__scramble_mutate,\n            3: self.__insert_mutate,\n            4: self.__swap_mutate",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.individual",
        "documentation": {}
    },
    {
        "label": "Point",
        "kind": 6,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.point",
        "description": "Dropbox.workspace_dropbox.TSP_GA.point",
        "peekOfCode": "class Point:\n    def __init__(self, position: tuple[int, int]):\n        self.__position = position\n    def get_position(self):\n        return self.__position\n    def get_distance_to(self, other: \"Point\") -> float:\n        return ((self.__position[0] - other.get_position()[0])**2 + (self.__position[1] - other.get_position()[1])**2)**0.5\nif __name__ == \"__main__\":\n    a = Point((0, 0))\n    b = Point((1, 1))",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.point",
        "documentation": {}
    },
    {
        "label": "Population",
        "kind": 6,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.population",
        "description": "Dropbox.workspace_dropbox.TSP_GA.population",
        "peekOfCode": "class Population:\n    def __init__(self, individual : \"Individual\", population_size : int, mutation_rate = 30):\n        self.__list = self.__init_population(individual, population_size)\n        self.__mutation_rate = mutation_rate\n    def __getitem__(self, index: int) -> Individual:\n        return self.__list[index]\n    def get_mutate_rate(self):\n        return self.__mutation_rate\n    def set_mutate_rate(self, rate):\n        self.__mutation_rate = rate",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.population",
        "documentation": {}
    },
    {
        "label": "TSP",
        "kind": 6,
        "importPath": "Dropbox.workspace_dropbox.TSP_GA.TSPSolver",
        "description": "Dropbox.workspace_dropbox.TSP_GA.TSPSolver",
        "peekOfCode": "class TSP:\n    def __init__(self):\n        pygame.init()\n        self.screen = pygame.display.set_mode((1200, 700))\n        self.clock = pygame.time.Clock()\n        self.is_running = True\n        self.mouse_x, self.mouse_y = 0, 0\n        self.genetic_algorithm_running = False\n        self.iteration = 0\n        self.points = []",
        "detail": "Dropbox.workspace_dropbox.TSP_GA.TSPSolver",
        "documentation": {}
    }
]